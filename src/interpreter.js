// Generated by CoffeeScript 1.10.0
var Closure, Continuation, Program;

Program = (function() {
  function Program(ast1) {
    this.ast = ast1;
    this.cont = this.evaluate(this.ast, {});
    this.terminated = false;
  }

  Program.prototype.step = function() {
    if (!this.terminated) {
      this.cont = this.cont.step();
      return this.terminated = !(this.cont instanceof Continuation);
    }
  };

  Program.prototype.evaluate = function(ast, env) {
    var context, i, len, obj, resolved;
    if (env == null) {
      env = {};
    }
    context = {
      ast: ast,
      env: env
    };
    switch (ast.syntax) {
      case 'if':
        return new Continuation(context, 'in', (function(_this) {
          return function() {
            return _this.evaluate(ast.condExp, env).then(function(x) {
              if (x === true) {
                return _this.evaluate(ast.thenExp, env).then(function(y) {
                  return new Continuation(context, 'out', function() {
                    return y;
                  });
                });
              } else {
                return _this.evaluate(ast.elseExp, env).then(function(y) {
                  return new Continuation(context, 'out', function() {
                    return y;
                  });
                });
              }
            });
          };
        })(this));
      case 'let':
        return new Continuation(context, 'in', (function(_this) {
          return function() {
            return _this.evaluate(ast.varExp, env).then(function(x) {
              var newEnv, obj1;
              newEnv = [
                (
                  obj1 = {},
                  obj1["" + ast.varName.string] = x,
                  obj1
                )
              ].concat(env);
              return _this.evaluate(ast.bodyExp, newEnv).then(function(y) {
                return new Continuation(context, 'out', function() {
                  return y;
                });
              });
            });
          };
        })(this));
      case 'let-rec':
        return new Continuation(context, 'in', (function(_this) {
          return function() {
            var closure;
            closure = new Closure(env, ast.funcParamNames, ast.funcExp);
            closure.bindName(ast.funcName.string);
            return _this.evaluate(ast.bodyExp, closure.env).then(function(y) {
              return new Continuation(context, 'out', function() {
                return y;
              });
            });
          };
        })(this));
      case 'let-tuple':
        return new Continuation(context, 'in', (function(_this) {
          return function() {
            return _this.evaluate(ast.tupleExp, env).then(function(t) {
              var i, idx, len, newEnv, ref, v;
              newEnv = {};
              ref = ast.varNames;
              for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
                v = ref[idx];
                newEnv[v.string] = t[idx];
              }
              return _this.evaluate(ast.bodyExp, [newEnv].concat(env)).then(function(y) {
                return new Continuation(context, 'out', function() {
                  return y;
                });
              });
            });
          };
        })(this));
      case 'apply':
        return new Continuation(context, 'in', (function(_this) {
          return function() {
            return _this.evaluate(ast.leftExp, env).then(function(x) {
              return _this.evaluate(ast.rightExp, env).then(function(y) {
                var closure;
                closure = x.apply(y);
                if (closure.paramNames.length === 0) {
                  return _this.evaluate(closure.bodyExp, closure.env).then(function(z) {
                    return new Continuation(context, 'out', function() {
                      return z;
                    });
                  });
                } else {
                  return new Continuation(context, 'out', function() {
                    return closure;
                  });
                }
              });
            });
          };
        })(this));
      case 'eq':
      case 'le':
      case 'add':
      case 'sub':
      case 'mul':
      case 'div':
        return new Continuation(context, 'in', (function(_this) {
          return function() {
            return _this.evaluate(ast.leftExp, env).then(function(x) {
              return _this.evaluate(ast.rightExp, env).then(function(y) {
                return new Continuation(context, 'out', function() {
                  switch (ast.syntax) {
                    case 'eq':
                      return x === y;
                    case 'le':
                      return x <= y;
                    case 'add':
                      return x + y;
                    case 'sub':
                      return x - y;
                    case 'mul':
                      return x * y;
                    case 'div':
                      return x / y;
                  }
                });
              });
            });
          };
        })(this));
      case 'not':
      case 'neg':
        return new Continuation(context, 'in', (function(_this) {
          return function() {
            return _this.evaluate(ast.exp, env).then(function(x) {
              return new Continuation(context, 'out', function() {
                switch (ast.syntax) {
                  case 'not':
                    return !x;
                  case 'neg':
                    return -x;
                }
              });
            });
          };
        })(this));
      case 'tuple':
        return new Continuation(context, 'in', (function(_this) {
          return function() {
            return _this.evaluateSeq(ast.exps, env, function(xs) {
              return new Continuation(context, 'out', function() {
                return xs;
              });
            });
          };
        })(this));
      case 'parenthesis':
        return this.evaluate(ast.exp, env);
      case 'var-ref':
        resolved = null;
        for (i = 0, len = env.length; i < len; i++) {
          obj = env[i];
          if (obj.hasOwnProperty(ast.string)) {
            resolved = obj[ast.string];
            break;
          }
        }
        return new Continuation(context, 'bottom', (function(_this) {
          return function() {
            return resolved;
          };
        })(this));
      case 'bool':
        return new Continuation(context, 'bottom', (function(_this) {
          return function() {
            return ast.bool;
          };
        })(this));
      case 'int':
        return new Continuation(context, 'bottom', (function(_this) {
          return function() {
            return ast.number;
          };
        })(this));
      case 'unit':
        return new Continuation(context, 'bottom', (function(_this) {
          return function() {
            return null;
          };
        })(this));
    }
  };

  Program.prototype.evaluateSeq = function(exps, env, f, xs) {
    if (xs == null) {
      xs = [];
    }
    if (exps.length > 0) {
      return this.evaluate(exps[0], env).then((function(_this) {
        return function(x) {
          return _this.evaluateSeq(exps.slice(1), env, f, xs.concat([x]));
        };
      })(this));
    } else {
      return f(xs);
    }
  };

  Program.markLineHeads = function(ast) {
    var a, i, j, l, len, len1, map, o, ref, results;
    map = [];
    ref = this.flattenAST(ast);
    for (i = 0, len = ref.length; i < len; i++) {
      a = ref[i];
      l = a.location.start.line;
      o = a.location.start.column;
      if (map[l] === void 0 || o < map[l].location.start.column) {
        map[l] = a;
      }
    }
    results = [];
    for (j = 0, len1 = map.length; j < len1; j++) {
      a = map[j];
      if (a !== void 0) {
        results.push(a.leftMost = true);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Program.flattenAST = function(ast) {
    var key, res, val;
    res = [ast];
    if (ast.syntax === void 0 || ast.syntax === 'identifier') {
      return [];
    } else if (ast.syntax === 'parenthesis') {
      return this.flattenAST(ast.exp);
    } else {
      for (key in ast) {
        val = ast[key];
        res = res.concat(this.flattenAST(val));
      }
      return res;
    }
  };

  Program.valueToString = function(value) {
    var a;
    if (value === null) {
      return "unit";
    } else if (value instanceof Array) {
      return '(' + ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = value.length; i < len; i++) {
          a = value[i];
          results.push(this.valueToString(a));
        }
        return results;
      }).call(this)).join(', ') + ')';
    } else {
      return value.toString();
    }
  };

  Program.envToString = function(env) {
    var flat, h, i, len, name, pairs, val;
    flat = {};
    for (i = 0, len = env.length; i < len; i++) {
      h = env[i];
      for (name in h) {
        val = h[name];
        if (flat[name] === void 0) {
          flat[name] = val;
        }
      }
    }
    pairs = (function() {
      var results;
      results = [];
      for (name in flat) {
        val = flat[name];
        results.push(name + ": " + (this.valueToString(val)));
      }
      return results;
    }).call(this);
    return '{' + pairs.join(', ') + '}';
  };

  return Program;

})();

Closure = (function() {
  function Closure(env1, paramNames, bodyExp) {
    this.env = env1;
    this.paramNames = paramNames;
    this.bodyExp = bodyExp;
  }

  Closure.prototype.bindName = function(name) {
    var obj1;
    return this.env = [
      (
        obj1 = {},
        obj1["" + name] = this,
        obj1
      )
    ].concat(this.env);
  };

  Closure.prototype.apply = function(value) {
    var firstParamName, newEnv, obj1;
    firstParamName = this.paramNames[0].string;
    newEnv = [
      (
        obj1 = {},
        obj1["" + firstParamName] = value,
        obj1
      )
    ].concat(this.env);
    return new Closure(newEnv, this.paramNames.slice(1), this.bodyExp);
  };

  Closure.prototype.toString = function() {
    return '<#Closure>';
  };

  return Closure;

})();

Continuation = (function() {
  function Continuation(context1, visitType, step) {
    this.context = context1;
    this.visitType = visitType;
    this.step = step;
  }

  Continuation.prototype.isIn = function() {
    return this.visitType === 'in';
  };

  Continuation.prototype.isOut = function() {
    return this.visitType === 'out';
  };

  Continuation.prototype.isBottom = function() {
    return this.visitType === 'bottom';
  };

  Continuation.prototype.then = function(f) {
    return new Continuation(this.context, this.visitType, (function(_this) {
      return function() {
        var c;
        if ((c = _this.step()) instanceof Continuation) {
          return c.then(f);
        } else {
          return f(c);
        }
      };
    })(this));
  };

  return Continuation;

})();

if (typeof exports !== "undefined" && exports !== null) {
  exports.Program = Program;
  exports.Closure = Closure;
  exports.Continuation = Continuation;
}
