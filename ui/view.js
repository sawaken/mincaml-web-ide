// Generated by CoffeeScript 1.10.0
(function() {
  var BreakpointObi, EditorBackPanel, EditorBox, EditorCaret, LeftBox, LineNumberObi, RightBox, Root, dispatcher, store;

  store = new Store();

  dispatcher = new Dispatcher(store);

  Root = React.createClass({displayName: "Root",
    getInitialState: function() {
      return store;
    },
    componentDidMount: function() {
      return setInterval(((function(_this) {
        return function() {
          return _this.setState(store);
        };
      })(this)), 20);
    },
    render: function() {
      return React.createElement("div", {
        "className": "container-fluid full-height ide-whole"
      }, React.createElement("div", {
        "className": "row bg-inverse card-header ide-header"
      }, React.createElement("div", {
        "className": "container"
      }, React.createElement("h2", {
        "className": "text-md-center"
      }, "MinCaml Web IDE"))), React.createElement("div", {
        "className": "row ide-content"
      }, React.createElement(LeftBox, {
        "editor": this.state.editor,
        "codeStatus": this.state.codeStatus,
        "execution": this.state.execution
      }), React.createElement(RightBox, {
        "console": this.state.console
      })));
    }
  });

  LeftBox = React.createClass({displayName: "LeftBox",
    stopping: function() {
      return this.props.execution.status === Store.Execution.Stopping;
    },
    runButtonDisplay: function() {
      if (this.stopping() && this.props.codeStatus === Store.CodeStatus.Ok) {
        return {};
      } else {
        return {
          display: 'none'
        };
      }
    },
    stopButtonDisplay: function() {
      if (this.stopping()) {
        return {
          display: 'none'
        };
      } else {
        return {};
      }
    },
    continueButtonDisplay: function() {
      if (this.props.execution.status === Store.Execution.Breaking) {
        return {};
      } else {
        return {
          display: 'none'
        };
      }
    },
    codeStatus: function() {
      switch (this.props.execution.status) {
        case Store.Execution.Running:
          return React.createElement("span", null, React.createElement("i", {
            "className": "fa fa-cog fa-spin color-thin"
          }), React.createElement("span", {
            "className": "editor-cstyle color-thin"
          }, "Now Running..."));
        case Store.Execution.Breaking:
          return React.createElement("span", null, React.createElement("i", {
            "className": "fa fa-stop color-thin"
          }), React.createElement("span", {
            "className": "editor-cstyle color-thin"
          }, "Now Breaking..."));
        case Store.Execution.Stopping:
          switch (this.props.codeStatus) {
            case Store.CodeStatus.Unknown:
              return React.createElement("span", null, React.createElement("i", {
                "className": "fa fa-spinner fa-spin color-thin"
              }), React.createElement("span", {
                "className": "editor-cstyle color-thin"
              }, "Now Editing..."));
            case Store.CodeStatus.Ok:
              return React.createElement("span", null, React.createElement("i", {
                "className": "fa fa-check color-green"
              }), React.createElement("span", {
                "className": "editor-cstyle color-green"
              }, "Syntax OK"));
            case Store.CodeStatus.TypeError:
              return React.createElement("span", null, React.createElement("i", {
                "className": "fa fa-times color-red"
              }), React.createElement("span", {
                "className": "editor-cstyle color-red"
              }, "Type Error"));
            case Store.CodeStatus.SyntaxError:
              if (this.props.editor.rowCode === '') {
                return React.createElement("span", null);
              } else {
                return React.createElement("span", null, React.createElement("i", {
                  "className": "fa fa-times color-red"
                }), React.createElement("span", {
                  "className": "editor-cstyle color-red"
                }, "Syntax Error"));
              }
              break;
            case Store.CodeStatus.VarError:
              return React.createElement("span", null, React.createElement("i", {
                "className": "fa fa-times color-red"
              }), React.createElement("span", {
                "className": "editor-cstyle color-red"
              }, "Unbound Variable"));
          }
      }
    },
    render: function() {
      return React.createElement("div", {
        "className": "col-xs-6 bg-grey ide-left"
      }, React.createElement("div", {
        "className": "row ide-left-header"
      }), React.createElement("div", {
        "className": "row ide-left-content"
      }, React.createElement(LineNumberObi, {
        "count": this.props.editor.lineNumbers
      }), React.createElement(BreakpointObi, {
        "count": this.props.editor.lineNumbers,
        "map": this.props.editor.breakpointLineMap
      }), React.createElement(EditorBox, {
        "editor": this.props.editor,
        "codeStatus": this.props.codeStatus,
        "execution": this.props.execution
      })), React.createElement("div", {
        "className": "row ide-left-status"
      }, React.createElement("div", {
        "className": "col-xs-1 editor-status-a"
      }), React.createElement("div", {
        "className": "col-xs-1 editor-status-b"
      }), React.createElement("div", {
        "className": "col-xs-10 editor-status-c"
      }, this.codeStatus())), React.createElement("div", {
        "className": "row ide-left-footer"
      }, React.createElement("span", {
        "className": "btn-position"
      }, React.createElement("a", {
        "className": "btn btn-primary btn-md",
        "role": "button",
        "onClick": ((function(_this) {
          return function() {
            return dispatcher.startProgram(_this.props.editor.rowCode);
          };
        })(this)),
        "style": this.runButtonDisplay()
      }, React.createElement("i", {
        "className": "fa fa-play"
      }), " Run")), React.createElement("span", {
        "className": "btn-position"
      }, React.createElement("a", {
        "className": "btn btn-primary btn-md",
        "role": "button",
        "onClick": ((function(_this) {
          return function() {
            return dispatcher.killProgram();
          };
        })(this)),
        "style": this.stopButtonDisplay()
      }, React.createElement("i", {
        "className": "fa fa-stop"
      }), " Stop")), React.createElement("span", {
        "className": "btn-position"
      }, React.createElement("a", {
        "className": "btn btn-primary btn-md",
        "role": "button",
        "onClick": ((function(_this) {
          return function() {
            return dispatcher.stopBreaking();
          };
        })(this)),
        "style": this.continueButtonDisplay()
      }, React.createElement("i", {
        "className": "fa fa-play"
      }), " Continue"))));
    }
  });

  LineNumberObi = React.createClass({displayName: "LineNumberObi",
    render: function() {
      var j, ref, results;
      return React.createElement("div", {
        "className": "col-xs-1 editor-cstyle editor-line-obi"
      }, (function() {
        results = [];
        for (var j = 1, ref = this.props.count; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this).map(function(i) {
        return React.createElement("div", {
          "key": i
        }, i);
      }));
    }
  });

  BreakpointObi = React.createClass({displayName: "BreakpointObi",
    render: function() {
      var j, ref, results, xs;
      xs = (function() {
        results = [];
        for (var j = 1, ref = this.props.count; 1 <= ref ? j <= ref : j >= ref; 1 <= ref ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this).map((function(_this) {
        return function(i) {
          var toggle;
          toggle = (function() {
            return dispatcher.toggleBreakpoint(i);
          });
          if (_this.props.map[i] === true) {
            return React.createElement("div", {
              "key": i,
              "className": "bpoint clickable",
              "onClick": toggle
            }, React.createElement("i", {
              "className": "fa fa-circle break-point-symbol clickable"
            }));
          } else {
            return React.createElement("div", {
              "key": i,
              "className": "bpoint clickable",
              "onClick": toggle
            });
          }
        };
      })(this));
      return React.createElement("div", {
        "className": "col-xs-1 editor-cstyle editor-line-obi"
      }, xs);
    }
  });

  RightBox = React.createClass({displayName: "RightBox",
    render: function() {
      var i, x;
      return React.createElement("div", {
        "className": "col-xs-6 bg-grey ide-right"
      }, React.createElement("div", {
        "className": "modal-header ide-screen-header"
      }, React.createElement("h1", null, React.createElement("small", null, "status"))), React.createElement("div", {
        "className": "bg-inverse editor-cstyle ide-screen",
        "dangerouslySetInnerHTML": {
          __html: this.props.console.status
        }
      }), React.createElement("div", {
        "className": "modal-header ide-screen-header"
      }, React.createElement("h1", null, React.createElement("small", null, "result"))), React.createElement("div", {
        "className": "bg-inverse editor-cstyle ide-screen"
      }, (function() {
        var j, len, ref, results;
        ref = this.props.console.results;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          x = ref[i];
          results.push(React.createElement("div", {
            "key": i
          }, x));
        }
        return results;
      }).call(this)));
    }
  });

  EditorBox = React.createClass({displayName: "EditorBox",
    editable: function() {
      return this.props.execution.status === Store.Execution.Stopping;
    },
    render: function() {
      var touch;
      touch = ((function(_this) {
        return function() {
          return dispatcher.keytyped(Date.now());
        };
      })(this));
      return React.createElement("div", {
        "className": "col-xs-10 bg-inverse editor-box"
      }, React.createElement("span", {
        "id": "left-pos-scale",
        "className": "editor-cstyle left-pos-scale"
      }), React.createElement(EditorBackPanel, {
        "ornamentalCode": this.props.editor.ornamentalCode,
        "lineNumbers": this.props.editor.lineNumbers
      }), React.createElement("textarea", {
        "id": "editor-front-panel",
        "className": "panel-position editor-cstyle editor-front-panel",
        "spellCheck": false,
        "onKeyDown": touch,
        "onKeyUp": touch,
        "onKeyPress": touch,
        "onPaste": touch,
        "onFocus": ((function(_this) {
          return function() {
            return dispatcher.focusEditor();
          };
        })(this)),
        "onBlur": ((function(_this) {
          return function() {
            return dispatcher.blurEditor();
          };
        })(this)),
        "style": {
          height: ((1.2 * this.props.editor.lineNumbers) + 2.0) + 'em'
        },
        "readOnly": !this.editable()
      }), React.createElement(EditorCaret, {
        "leftPos": this.props.editor.caretLeftPos,
        "topPos": this.props.editor.caretTopPos,
        "visible": this.props.editor.caretVisible
      }));
    }
  });

  EditorCaret = React.createClass({displayName: "EditorCaret",
    render: function() {
      var style;
      style = {
        left: this.props.leftPos,
        top: this.props.topPos,
        display: this.props.visible ? '' : 'none'
      };
      return React.createElement("div", {
        "className": "caret",
        "style": style
      });
    }
  });

  EditorBackPanel = React.createClass({displayName: "EditorBackPanel",
    render: function() {
      return React.createElement("div", {
        "className": "panel-position editor-cstyle editor-back-panel",
        "id": "editor-back-panel",
        "dangerouslySetInnerHTML": {
          __html: this.props.ornamentalCode
        },
        "style": {
          height: ((1.2 * this.props.lineNumbers) + 2.0) + 'em'
        }
      });
    }
  });

  $(function() {
    ReactDOM.render(React.createElement(Root, null), document.getElementById('ide-view'));
    setInterval(((function(_this) {
      return function() {
        var code, leftPos, leftString, leftStringTagDeleted, line, pos, ref, topPos;
        code = $('#editor-front-panel').val();
        pos = document.getElementById('editor-front-panel').selectionStart;
        ref = TextConverter.caret(code, pos), leftString = ref.leftString, line = ref.line;
        leftStringTagDeleted = TextConverter.escapeTag(leftString);
        $('#left-pos-scale').html(leftStringTagDeleted.replace(/\s/g, '&nbsp;'));
        leftPos = $('#left-pos-scale').width();
        topPos = (1.2 * (line - 1)) + 'em';
        dispatcher.setCode(code.replace(/\r\n/g, '\n'));
        dispatcher.setLineInfo(code);
        dispatcher.setCaret(leftPos, topPos);
        dispatcher.setCurrentTime(Date.now());
        dispatcher.stepProgram();
        return dispatcher.setCaretVisible();
      };
    })(this)), 20);
    return setInterval(((function(_this) {
      return function() {
        return dispatcher.toggleCaretFlashing();
      };
    })(this)), 500);
  });

}).call(this);
